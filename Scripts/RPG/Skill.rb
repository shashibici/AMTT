module RPG
#==============================================================================
# ■ Skill_Base
#------------------------------------------------------------------------------
# 	Skill_Base 定义了所有技能的基类
# 	技能分为两类： 触发技和锁定技
#	触发函数是一个trigger_func，在Skill_Base中定义。
#   trigger_func 会调用效果函数effect_func、时机函数can_trigger?。不同技能效果函数不同
#	锁定技函数在技能被添加或者战斗开始的时候就调用。
#   锁定技函数通常是改变自身或者对方的states
#==============================================================================
	class Skill_Base < UsableItem
		include GAME_CONF
		attr_accessor :attacker			# 攻击者
		attr_accessor :target 			# 目标
		attr_accessor :subscriber		# 订阅攻击时机
		attr_accessor :priority			# 优先级
		attr_accessor :level			# 等级
		attr_accessor :name 			# 名字 -- 同一战斗者而言，名字+等级唯一识别一个技能
		#--------------------------------------------------------------------------
		# ● 初始化
		#--------------------------------------------------------------------------
		def initialize(name, level)
			super
			@name = name
			@level = level
		end
		#--------------------------------------------------------------------------
		# ● 设置对象	
		#	attacker		: 	使用者 
		# 	target 			: 	目标者 
		# 	subscriber 		: 	攻击时机，在GAME_CONF中定义
		#--------------------------------------------------------------------------
		def setup(attacker, target, subscriber, priority = 0)
			@attacker = attacker
			@target = target
			@subscriber = subscriber
			@priority = priority
			compulsory_func
		end
		#--------------------------------------------------------------------------
		# ● 设置 subscriber 
		# 		不同技能触发的时机不同，订阅不一样时机
		#--------------------------------------------------------------------------
		def set_subscriber(s)
			@subscriber = s
		end
		#--------------------------------------------------------------------------
		# ● 锁定技函数
		# 		在技能被添加的时候或者战斗开始的时候被调用，一般是添加状态
		#--------------------------------------------------------------------------
		def compulsory_func
		end
		#--------------------------------------------------------------------------
		# ● 触发技函数
		# 		在每个事件发生的时候都会调用一次
		# 		事件包括攻击事件和阶段切换事件
		#--------------------------------------------------------------------------
		def trigger_func
			if can_trigger?
				effect_func
			end
		end
		#--------------------------------------------------------------------------
		# ● 判断触发条件
		# 		此函数由子类具体实现
		#--------------------------------------------------------------------------
		def can_trigger?
			return true
		end
		#--------------------------------------------------------------------------
		# ● 触发效果函数
		#		此函数由子类具体实现
		#--------------------------------------------------------------------------
		def effect_func
		end
		#--------------------------------------------------------------------------
		# ● 动画函数
		#		此函数由子类具体实现,必要的时候定义内部属性传参数
		# 		这个函数在播放动画的时候会调用 -- 依据技能优先级显示动画
		#--------------------------------------------------------------------------
		def animation_func
		end				
		#--------------------------------------------------------------------------
		# ● 被触发,必须在每个技能中都有实现
		# 	
		# 	brate	: 	暴击倍数， 0-没暴击
		#	pre_dmg	:	计算护甲之前。 攻击者产生的伤害
		#	dmg 	: 	计算护甲之后。实际作用伤害
		# 	pure	: 	纯粹伤害，如果有
		#	hitflg	:	是否命中
		# 	bomflg	:	是否暴击
		#--------------------------------------------------------------------------
		def triggered(brate = 0, pre_dmg = 0, dmg = 0, pure = 0, hitflag = true, bomflag = false)
			return [brate, pre_dmg, dmg, pure]
		end
	end
	#==============================================================================
	# ■ 示例1  反弹
	#------------------------------------------------------------------------------
	# 	有20%几率将对方造成的伤害的 技能等级 X 5% 以纯粹伤害反弹
	#===============================================================
	class Fantan < Skill
		include GAME_CONF
		#--------------------------------------------------------------------------
		# ● 初始化
		#--------------------------------------------------------------------------
		def initialize
			super
		end
		#--------------------------------------------------------------------------
		# ● 设置对象	
		#	attacker	: 	使用者 (影响调用者)
		# 	target 		: 	目标者 (影响调用者)
		# 	time 		: 	默认为 $TIME_POST_PRE_DAMAGE （最终伤害已经出来）
		# 	priority	: 	默认为1，一般就不修改了
		#--------------------------------------------------------------------------
		def setup(attacker, target, time = $TIME_POST_PRE_DAMAGE, priority = 1)
			@attacker = attacker
			@target = target
			@time = time
			@priority = priority
		end
		#--------------------------------------------------------------------------
		# ● 被触发,必须在每个技能中都有实现
		#	
		#	
		#
		#
		#
		#--------------------------------------------------------------------------
		def triggered(brate = 0, drate = 0, dmg = 0, pure = 0, hitflag = true, bomflag = false)
			if hitflag == false
				return [brate, drate, dmg, pure]
			end
			if $TIME_POST_PRE_DAMAGE != $NOW_TIME or !@target.has_skill?(self.id)
				return [brate, drate, dmg, pure]
			end
			if 20 < rand(101) 
				return [brate, drate, dmg, pure]
			end
			# 获得反弹伤害
			d = dmg * (@target.my_skills)[self.id]["level"] * 0.05
			# 实施纯粹伤害
			@target.dodamage(@attacker, d)
			if @target.hero?
				# 显示伤害 - 目标是英雄，被反弹的是怪物
				$game_map.events[$game_variables[37]].damage_talk(d.to_i)
				$game_map.events[$game_variables[37]].animation_id = 110
			else
				# 显示伤害
				$game_player.damage_talk(d.to_i)
				# 显示动画-纯粹伤害
				$game_player.animation_id = 110
			end
			
			return [brate, drate, dmg, pure]
		end
	end
	
	
end
