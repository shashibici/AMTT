module RPG
#==============================================================================
# ■ Skill_Base
#------------------------------------------------------------------------------
# 	Skill_Base 定义了所有技能的基类
# 	技能分为两类： 触发技和锁定技
#	触发函数是一个trigger_func，在Skill_Base中定义。
#   trigger_func 会调用效果函数effect_func、时机函数can_trigger?。不同技能效果函数不同
#	锁定技函数在技能被添加或者战斗开始的时候就调用。
#   锁定技函数通常是改变自身或者对方的states
#==============================================================================
	class Skill_Base < UsableItem
		include GAME_CONF
		attr_accessor :attacker			# 攻击者
		attr_accessor :target 			# 目标
		attr_accessor :subscriber		# 订阅攻击时机
		attr_accessor :priority			# 优先级
		attr_accessor :level			# 等级
		attr_accessor :name 			# 名字 -- 同一战斗者而言，名字+等级唯一识别一个技能
		#--------------------------------------------------------------------------
		# ● 初始化
		#--------------------------------------------------------------------------
		def initialize(name, level)
			super
			@name = name
			@level = level
		end
		#--------------------------------------------------------------------------
		# ● 设置对象	
		#	attacker		: 	使用者 
		# 	target 			: 	目标者 
		# 	subscriber 		: 	攻击时机列表，在GAME_CONF中定义
		#--------------------------------------------------------------------------
		def setup(attacker, target, subscriber, priority = 0)
			@attacker = attacker
			@target = target
			@subscriber = subscriber
			@priority = priority
			compulsory_func
		end
		#--------------------------------------------------------------------------
		# ● 设置 subscriber 
		# 		不同技能触发的时机不同，订阅不一样时机
		#--------------------------------------------------------------------------
		def set_subscriber(s)
			@subscriber = s
		end
		#--------------------------------------------------------------------------
		# ●  动态修改优先级
		#--------------------------------------------------------------------------
		def set_priority(p)
			@priority = p
		end	
		#--------------------------------------------------------------------------
		# ● 锁定技函数
		# 		在技能被添加的时候或者战斗开始的时候被调用，一般是添加状态
		#--------------------------------------------------------------------------
		def compulsory_func
		end
		#--------------------------------------------------------------------------
		# ● 触发技函数
		# 		在每个事件发生的时候都会调用一次
		# 		事件包括攻击事件和阶段切换事件
		# 		args 是一个 hash 结构，用来传递参数
		#--------------------------------------------------------------------------
		def trigger_func(args)
			if can_trigger?(args)
				effect_func(args)
			end
		end
		#--------------------------------------------------------------------------
		# ● 判断触发条件
		# 		此函数由子类具体实现
		#--------------------------------------------------------------------------
		def can_trigger?
			return true
		end
		#--------------------------------------------------------------------------
		# ● 触发效果函数
		#		此函数由子类具体实现
		#--------------------------------------------------------------------------
		def effect_func
		end
		#--------------------------------------------------------------------------
		# ● 动画函数
		#		此函数由子类具体实现,必要的时候定义内部属性传参数
		# 		这个函数在播放动画的时候会调用 -- 依据技能优先级显示动画
		#--------------------------------------------------------------------------
		def animation_func(args)
		end				
		#--------------------------------------------------------------------------
		# ● 被触发,必须在每个技能中都有实现
		# 	
		# 	brate	: 	暴击倍数， 0-没暴击
		#	pre_dmg	:	计算护甲之前。 攻击者产生的伤害
		#	dmg 	: 	计算护甲之后。实际作用伤害
		# 	pure	: 	纯粹伤害，如果有
		#	hitflg	:	是否命中
		# 	bomflg	:	是否暴击
		#--------------------------------------------------------------------------
		def triggered(brate = 0, pre_dmg = 0, dmg = 0, pure = 0, hitflag = true, bomflag = false)
			return [brate, pre_dmg, dmg, pure]
		end
	end
	#==============================================================================
	# ■ 示例1  反弹
	#------------------------------------------------------------------------------
	# 	有20%几率将对方造成的伤害的 技能等级 X 5% 以纯粹伤害反弹
	#==============================================================================
	class Fantan < Skill
		include GAME_CONF
		#--------------------------------------------------------------------------
		# ● 初始化
		#--------------------------------------------------------------------------
		def initialize(name, level)
			super(name, level)
		end
		#--------------------------------------------------------------------------
		# ● 设置对象	
		#	attacker	: 	使用者 (影响调用者)
		# 	target 		: 	目标者 (影响调用者)
		# 	time 		: 	默认为 空
		# 	priority	: 	默认为1，一般就不修改了
		#--------------------------------------------------------------------------
		def setup(attacker, target, subscriber = [], priority = 1)
			# 伤害都结算完了之后调用
			subscriber = [$TIME_POST_PRE_DAMAGE]
			super(attacker, target, subscriber, priority)
		end
		#--------------------------------------------------------------------------
		# ● 这是一个触发技能，需要实现can_trigger?
		#--------------------------------------------------------------------------
		def can_trigger?(args)
			ret = super
			for event in @subscriber
				if event == $NOW_TIME
					ret = ret & true
					break
				end
			end
			ret = ret & (args["target"].hp > 0)
			ret = ret & (args["source"].hp > 0)
			return ret
		end
		#--------------------------------------------------------------------------
		# ● 这是一个触发技能，需要实现effect_func触发效果
		#--------------------------------------------------------------------------
		def effect_func(args)
			if rand(100) < 20
				damage = args["damage"]
				bounce = @level * 0.05 * damage
				args["target"].pureDamage(args["source"])
			end
			# 例如，需要给对方增加一个减速效果,持续5秒
			state = State_Base.new(args["source"], 5, Graphics.frame_rate*5)
			args["source"].add_state(state)
		end
		#--------------------------------------------------------------------------
		# ● 这是一个触发技能，需要实现effect_func触发效果
		#--------------------------------------------------------------------------
		def animation_func(args)
			super(args)
			animation = {}
			if args["target"].hero?
				animation["seq"] = $Battle_animation_counter_player
				animation["value"] = [4, 121]
				$Battle_animation_counter_player += 1
			else
				animation["seq"] = $Battle_animation_counter_enemy
				animation["value"] = [4, 121]
				$Battle_animation_counter_enemy += 1
			end
			args["target"].add_animation(animation)
		end
	end
end
