module RPG
#==============================================================================
# ■ Skill_Base
#------------------------------------------------------------------------------
# 	Skill_Base 定义了所有技能的基类
# 	技能分为两类： 触发技和锁定技
#	触发函数是一个trigger_func，在Skill_Base中定义。
#   trigger_func 会调用效果函数effect_func、时机函数can_trigger?。不同技能效果函数不同
#	锁定技函数在技能被添加或者战斗开始的时候就调用。
#   锁定技函数通常是改变自身或者对方的states
#==============================================================================
	class Skill_Base < UsableItem
		#include GAME_CONF
		attr_accessor :battler			# 指向技能所属者
		attr_accessor :priority			# 优先级，所有技能的优先级不能够有重复
		attr_accessor :level			# 等级
		attr_accessor :name 			# 名字 -- 同一战斗者而言，名字+等级唯一识别一个技能
		attr_accessor :type  			# 类型 -- 特殊技、锁定技、触发技 (0-特殊，1-锁定，2-触发)
		attr_accessor :locked  			# 锁标志，如果该技能被“锁”则不会有效--优先级：特殊技>锁定技>触发技
										# 特殊技可以是被触发的。例如某锁定技可以禁止所有触发技，但特殊技不受影响
		#--------------------------------------------------------------------------
		# ● 初始化
		#--------------------------------------------------------------------------
		def initialize
			super
			@locked = false
			@type = 2         # 默认为触发技
		end
		#--------------------------------------------------------------------------
		# ● 设置对象	
		#	attacker		: 	使用者 
		# 	target 			: 	目标者 
		# 	subscriber 		: 	攻击时机列表，在GAME_CONF中定义
		#--------------------------------------------------------------------------
		def setup(name, level, battler, priority = 0)
			@name = name
			@level = level
			@battler = battler
			@priority = priority
		end
		#--------------------------------------------------------------------------
		# ●  重置该技能
		#     在战斗结束后调用
		#--------------------------------------------------------------------------
		def reset
			@locked = false
		end
		#--------------------------------------------------------------------------
		# ●  动态修改优属于者
		#
		#  	此函数在角色学习技能的时候调用
		#--------------------------------------------------------------------------
		def set_battler(battler)
			@battler = battler
		end
		#--------------------------------------------------------------------------
		# ●  动态修改优先级
		#--------------------------------------------------------------------------
		def set_priority(p)
			@priority = p
		end	
		#--------------------------------------------------------------------------
		# ● 特殊技函数
		# 		战斗开始时优先于锁定技被调用
		#       任何需要影响“锁定技”的操纵必须在这个函数里定义。
		#       如果没有则不需要定义。
		#--------------------------------------------------------------------------
		def special_func
		end
		#--------------------------------------------------------------------------
		# ● 锁定技函数
		# 		在战斗开始的时候被调用，一般是添加某些状态
		#--------------------------------------------------------------------------
		def compulsory_func
		end
		#--------------------------------------------------------------------------
		# ● 触发技函数
		# 		在每个事件发生的时候都会调用一次
		# 		事件包括攻击事件和阶段切换事件
		# 		args 是一个 hash 结构，用来传递参数
		#--------------------------------------------------------------------------
		def trigger_func(args)
			if false == locked and can_trigger?(args)
				effect_func(args)
			end
		end
		#--------------------------------------------------------------------------
		# ● 判断触发条件
		# 		此函数由子类具体实现
		#--------------------------------------------------------------------------
		def can_trigger?(args)
			return false
		end
		#--------------------------------------------------------------------------
		# ● 触发效果函数
		#		此函数由子类具体实现
		#--------------------------------------------------------------------------
		def effect_func(args)
		end
		#--------------------------------------------------------------------------
		# ● 动画函数
		#		此函数由子类具体实现,必要的时候定义内部属性传参数
		# 		这个函数在播放动画阶段会调用 -- 依据技能优先级显示动画
		#--------------------------------------------------------------------------
		def animation_func(args)
		end
		#--------------------------------------------------------------------------
		# ● 技能描述
		# 		返回一个字符串数组
		# 		e.g., return ["反击：\n",
		# 					  "触发技，\n",
		# 					  "角色每次受到攻击有20%几率进行一次反击，\n",
		#                     "不能触发效果\n",]
		#--------------------------------------------------------------------------
		def description
			return ["名字","描述"]
		end
		#--------------------------------------------------------------------------
		# ● 价格函数
		# 	此函数返回该技能的价格
		#
		#   scalar:   	金钱扩张倍数
		#
		#--------------------------------------------------------------------------
		def price(scalar = 1)
			return Fround(0.0*scalar,1)
		end
		
	end
#==============================================================================
#==============================================================================
	#--------------------------------------------------------------------------
	# ● 返回技能对象
	# 	根据名字、等级返回唯一的技能对象。使用时最好用.clone方法复制。
	#
	#	例如：
	# 		skill = RPG.getSkill("反击", 1)
	#       if nil != skill 
	# 			skill  = skill.clone
	# 		end
	#--------------------------------------------------------------------------
	def self.getSkill(name, level)
		for skill_name in $skill_base.keys
			next if skill_name != name
			for skill_level in $skill_base[skill_name].keys
				next if skill_level != level
				return $skill_base[skill_name][skill_level]
			end
		end
		return nil
	end
end
